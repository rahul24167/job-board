datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? 
  accounts      Account[]
  sessions      Session[]
  createdOrganizations Organization[]
  MemberOrganizations MemberOrganization[]
  ModeratorOrganizations ModeratorOrganization[]
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  description String
  memberEmailDomain String
  ModeratorEmailDomain String
  createdBy String
  creator User @relation(fields: [createdBy], references: [id])
  Members   MemberOrganization[]
  Moderators ModeratorOrganization[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MemberOrganization {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  role String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model ModeratorOrganization {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id])
  jobs Job[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job{
  id String @id @default(cuid())
  title String
  description String
  company String
  location String
  salaryLowerLimit String
  salaryUpperLimit String
  employmentType String
  experienceLevel String
  postedBy String
  moderator ModeratorOrganization @relation(fields: [postedBy], references: [id])
  applyBefore DateTime
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

